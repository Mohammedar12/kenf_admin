{"version":3,"sources":["webpack:///src/app/pages/sellers/sellers-routing.module.ts","webpack:///src/app/core/resolvers/seller.resolver.ts","webpack:///src/app/pages/sellers/editseller/editseller.component.ts","webpack:///src/app/pages/sellers/editseller/editseller.component.html","webpack:///src/app/pages/sellers/addseller/addseller.component.ts","webpack:///src/app/pages/sellers/addseller/addseller.component.html","webpack:///src/app/pages/sellers/sellers.module.ts","webpack:///src/app/pages/sellers/sellerslist/sellerslist.component.ts","webpack:///src/app/pages/sellers/sellerslist/sellerslist.component.html"],"names":["routes","path","redirectTo","component","resolve","shop","SellersRoutingModule","forChild","imports","exports","SellerResolver","ds","route","state","id","paramMap","get","getSeller","providedIn","EditsellerComponent","router","formBuilder","http","setserv","backend","submit","image","file","files","config","getUploadConfig","customersData","snapshot","data","documents","productForm","controls","breadCrumbItems","label","active","group","required","name_en","name_ar","email","phone","address_en","address_ar","description_ar","description_en","city","region","zip","name","event","previewElement","parentNode","removeChild","response","JSON","parse","srcElement","push","console","log","setValue","index","indexOf","splice","invalid","addSeller","value","subscribe","navigate","validSubmit","onUploadSuccess","selector","templateUrl","styleUrls","AddsellerComponent","SellersModule","provide","useValue","declarations","providers","SellerslistComponent","marketingService","getSellers","val","currentpage","delSeller","filter"],"mappings":"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","file":"sellers-sellers-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AddsellerComponent } from './addseller/addseller.component';\nimport { SellerslistComponent } from './sellerslist/sellerslist.component';\nimport { EditsellerComponent } from './editseller/editseller.component';\n\nimport { SellerResolver } from '../../core/resolvers/seller.resolver';\n\n\nconst routes: Routes = [\n    { path: '', redirectTo: 'list' },\n\n    {\n        path: 'add',\n        component: AddsellerComponent,\n    },\n    {\n        path: 'list',\n        component: SellerslistComponent,\n    },\n    {\n        path: 'edit/:id',\n        component: EditsellerComponent,\n        resolve: {shop: SellerResolver}\n\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class SellersRoutingModule {}\n","import { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { take, map } from 'rxjs/operators';\nimport { Seller } from '../models/seller.models';\n\nimport { MarketingService } from '../services/marketing.service';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'any'\n})\nexport class SellerResolver implements Resolve <Observable<Seller>>{\n\n  constructor(private ds: MarketingService) { }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot){\n    let id = route.paramMap.get('id');\n    return this.ds.getSeller(id);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DropzoneConfigInterface } from 'ngx-dropzone-wrapper';\nimport { MarketingService } from '../../../core/services/marketing.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { environment } from '../../../../environments/environment';\nimport { Seller } from '../../../core/models/seller.models';\n\n@Component({\n  selector: 'app-editseller',\n  templateUrl: './editseller.component.html',\n  styleUrls: ['./editseller.component.scss']\n})\nexport class EditsellerComponent implements OnInit {\n  backend = environment.backend;\n\n  productForm: FormGroup;\n  // bread crumb items\n  breadCrumbItems: Array<{}>;\n  // Form submition\n  submit: boolean = false;\n\n  config: DropzoneConfigInterface;\n  image = '';\n  file = '';\n  files: number[] = [];\n  customersData: Seller;\n\n  constructor(private route: ActivatedRoute, private router: Router, public formBuilder: FormBuilder, private http: HttpClient, private setserv: MarketingService) {\n    this.config = setserv.getUploadConfig();\n    this.customersData = this.route.snapshot.data.shop;\n    this.files = this.customersData.documents;\n\n  }\n  /**\n   * Returns form\n   */\n  get form() {\n    return this.productForm.controls;\n  }\n\n  ngOnInit() {\n    this.breadCrumbItems = [{ label: 'Sellers' }, { label: 'Add Seller', active: true }];\n\n    this.productForm = this.formBuilder.group({\n      id: [this.customersData.id, [Validators.required]],\n\n      name_en: [this.customersData.name_en, [Validators.required]],\n      name_ar: [this.customersData.name_ar, [Validators.required]],\n      email: [this.customersData.email, [Validators.required]],\n      phone: [this.customersData.phone, [Validators.required]],\n      address_en: [this.customersData.address_en, [Validators.required]],\n      address_ar: [this.customersData.address_ar, [Validators.required]],\n      description_ar: [this.customersData.description_ar, [Validators.required]],\n      description_en: [this.customersData.description_en, [Validators.required]],\n      city: [this.customersData.city, [Validators.required]],\n      region: [this.customersData.region, [Validators.required]],\n      zip: [this.customersData.zip, [Validators.required]],\n      documents: [this.customersData.documents, [Validators.required]],\n    });\n    this.submit = false;\n  }\n\n  onAccept(file: any) {\n    this.image = file.name;\n    this.file = file;\n  }\n  /**\n   * Bootsrap validation form submit method\n   */\n  onUploadSuccess(event) {\n    // event[2].srcElement.then(response => response.json()).then(data => console.log(data)).catch(err => console.log(err));\n    event[0].previewElement.parentNode.removeChild(event[0].previewElement);\n\n    let response = JSON.parse(event[2].srcElement.response);\n    this.files.push(response.id);\n    console.log(this.productForm.controls);\n\n    this.productForm.controls.documents.setValue(this.files);\n    this.submit = false;\n\n  }\n  deleteImage(id) {\n    const index = this.files.indexOf(id);\n    if (index > -1) {\n      this.files.splice(index, 1); // 2nd parameter means remove one item only\n      this.productForm.controls.documents.setValue(this.files);\n    }\n  }\n\n  validSubmit() {\n    this.submit = true;\n\n    // stop here if form is invalid\n    if (this.productForm.invalid) {\n      return;\n    } else {\n      console.log(this.productForm);\n\n      this.setserv.addSeller(this.productForm.value).subscribe(data => this.router.navigate(['/sellers/list']));\n      this.submit = false;\n\n\n    }\n    // const formData = new FormData();\n    // formData.append('name', this.productForm.get('name').value);\n    // formData.append('manufacture_name', this.productForm.get('manufacture_name').value);\n    // formData.append('manufacture_brand', this.productForm.get('manufacture_brand').value);\n    // formData.append('price', this.productForm.get('price').value);\n    // formData.append('image', this.file, this.image);\n    //\n    // this.http.post<any>(`http://localhost:8000/api/products`, formData)\n    //   .subscribe((data) => {\n    //     // console.log('da', data);\n    //     return data;\n    //   });\n  }\n}\n","<div class=\"container-fluid\">\n\n    <!-- start page title -->\n    <app-page-title title=\"Edit Seller\" [breadcrumbItems]=\"breadCrumbItems\"></app-page-title>\n    <!-- end page title -->\n\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <div class=\"card\">\n          <div class=\"card-body\">\n\n            <h4 class=\"card-title\">Basic Information</h4>\n            <p class=\"card-title-desc\">Fill all information</p>\n\n            <form [formGroup]=\"productForm\" id=\"productForm\" name=\"productForm\" (ngSubmit)=\"validSubmit()\">\n              <input type=\"hidden\" name=\"id\" formControlName=\"id\">\n\n              <div class=\"row\">\n                <div class=\"col-sm-6\">\n                  <div class=\"form-group\">\n                    <label for=\"shopname\">Seller Name</label>\n                    <input id=\"name_en\" name=\"name_en\" type=\"text\" class=\"form-control\" formControlName=\"name_en\"\n                      [ngClass]=\"{'is-invalid': submit && form.name_en.errors}\">\n                    <div *ngIf=\"submit && form.name_en.errors\" class=\"invalid-feedback\">\n                      <span *ngIf=\"form.name_en.errors.required\">Name is required.</span>\n                    </div>\n                  </div>\n\n                  <div class=\"form-group\">\n                    <label for=\"email\">Email</label>\n                    <input id=\"email\" name=\"email\" type=\"text\" class=\"form-control\" formControlName=\"email\"\n                      [ngClass]=\"{'is-invalid': submit && form.email.errors}\">\n                    <div *ngIf=\"submit && form.email.errors\" class=\"invalid-feedback\">\n                      <span *ngIf=\"form.email.errors.required\">Email is required.</span>\n                    </div>\n                  </div>\n\n                <div class=\"form-group\">\n                    <label for=\"address_en\">Address</label>\n                    <input id=\"address_en\" name=\"address_en\" type=\"text\" class=\"form-control\" formControlName=\"address_en\"\n                      [ngClass]=\"{'is-invalid': submit && form.address_en.errors}\">\n                    <div *ngIf=\"submit && form.address_en.errors\" class=\"invalid-feedback\">\n                      <span *ngIf=\"form.address_en.errors.required\">Address is required.</span>\n                    </div>\n                  </div>\n\n                  <div class=\"form-group\">\n                    <label for=\"phone\">Phone No.</label>\n                    <input id=\"phone\" name=\"phone\" type=\"text\" class=\"form-control\" formControlName=\"phone\"\n                      [ngClass]=\"{'is-invalid': submit && form.phone.errors}\">\n                    <div *ngIf=\"submit && form.phone.errors\" class=\"invalid-feedback\">\n                      <span *ngIf=\"form.phone.errors.required\">Phone is required.</span>\n                    </div>\n                  </div>\n\n\n                  <div class=\"form-group\">\n                    <label for=\"product-image\" class=\"mt-2\"> Documents</label>\n                    <dropzone class=\"dropzone\" [ngClass]=\"{'is-invalid': submit && form.documents.errors}\" (success)=\"onUploadSuccess($event)\" [config]=\"config\"></dropzone>\n                    <input id=\"documents\" name=\"documents\" type=\"hidden\" formControlName=\"documents\">\n                    <div *ngIf=\"submit && form.documents.errors\" class=\"invalid-feedback\">\n                      <span *ngIf=\"form.documents.errors.required\">Documents are required. Upload at least 1.</span>\n                    </div>\n                    <div *ngIf=\"files.length>0\" class=\"dropzone-display\">\n                      <div class=\"row\">\n                        <div *ngFor=\"let file of files\" class=\"col-md-4\">\n                          <div class=\"document-display\">\n                            <a (click)=\"deleteImage(file)\" class=\"delete-image\"><i class=\"fas fa-trash-alt text-danger mr-1\"></i>\n                            </a>\n                            <img src=\"{{backend + '/getfile/?id='  + file}}\" class=\"img-fluid mx-auto d-block\">\n                            <!-- <img src=\"{{backend + '/images/?id='  + image.id}}\" alt=\"\"\n                              class=\"img-fluid mx-auto d-block\"> -->\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                </div>\n\n                <div class=\"col-sm-6\">\n                    <div class=\"form-group\">\n                        <label for=\"name_ar\">إسم التاجر</label>\n                        <input id=\"name_ar\" name=\"name_ar\" type=\"text\" class=\"form-control\" formControlName=\"name_ar\"\n                          [ngClass]=\"{'is-invalid': submit && form.name_ar.errors}\">\n                        <div *ngIf=\"submit && form.name_ar.errors\" class=\"invalid-feedback\">\n                          <span *ngIf=\"form.name_ar.errors.required\">إسم التاجر is required.</span>\n                        </div>\n                      </div>\n\n                      <div class=\"row\">\n                        <div class=\"col-lg-4\">\n                            <div class=\"form-group\">\n                                <label for=\"formrow-inputCity\">City</label>\n                                <input type=\"text\" class=\"form-control\" id=\"city\" formControlName=\"city\"\n                                [ngClass]=\"{'is-invalid': submit && form.city.errors}\">\n                                <div *ngIf=\"submit && form.city.errors\" class=\"invalid-feedback\">\n                                  <span *ngIf=\"form.city.errors.required\">City is required.</span>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-lg-4\">\n                            <div class=\"form-group\">\n                                <label for=\"formrow-inputState\">Region</label>\n                                <ng-select formControlName=\"region\" [ngClass]=\"{'is-invalid': submit && form.region.errors}\" [items]=\"['Ar Riyadh','Western Region', 'Eastern Region', 'Medina Region', 'Aseer', 'Jazan']\"></ng-select>\n                                <div *ngIf=\"submit && form.region.errors\" class=\"invalid-feedback\">\n                                  <span *ngIf=\"form.region.errors.required\">Region is required.</span>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"col-lg-4\">\n                            <div class=\"form-group\">\n                                <label for=\"formrow-inputZip\">Zip</label>\n                                <input type=\"text\" class=\"form-control\" formControlName=\"zip\" id=\"zip\"\n                                [ngClass]=\"{'is-invalid': submit && form.zip.errors}\">\n                                <div *ngIf=\"submit && form.zip.errors\" class=\"invalid-feedback\">\n                                  <span *ngIf=\"form.zip.errors.required\">Zip is required.</span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"address_ar\">العنوان</label>\n                        <input id=\"address_ar\" name=\"address_ar\" type=\"text\" class=\"form-control\" formControlName=\"address_ar\"\n                          [ngClass]=\"{'is-invalid': submit && form.address_ar.errors}\">\n                        <div *ngIf=\"submit && form.address_ar.errors\" class=\"invalid-feedback\">\n                          <span *ngIf=\"form.address_ar.errors.required\">Address is required.</span>\n                        </div>\n                      </div>\n\n                  <div class=\"form-group\">\n                    <label for=\"productdesc\">Notes</label>\n                    <textarea class=\"form-control\" [ngClass]=\"{'is-invalid': submit && form.description_en.errors}\" formControlName=\"description_en\" id=\"description_en\" rows=\"5\"></textarea>\n                    <div *ngIf=\"submit && form.description_en.errors\" class=\"invalid-feedback\">\n                      <span *ngIf=\"form.description_en.errors.required\">Notes are required.</span>\n                    </div>\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"productdesc\">ملاحظات</label>\n                    <textarea class=\"form-control\"  [ngClass]=\"{'is-invalid': submit && form.description_ar.errors}\" formControlName=\"description_ar\" id=\"description_ar\" rows=\"5\"></textarea>\n                    <div *ngIf=\"submit && form.description_ar.errors\" class=\"invalid-feedback\">\n                      <span *ngIf=\"form.description_ar.errors.required\">ملاحظات are required.</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"mt-3\">\n                <input type=\"submit\" form=\"productForm\" class=\"btn btn-primary mr-1\" value=\"Save Changes\" [disabled]=\"submit\"/>\n                <button type=\"submit\" class=\"btn btn-secondary\">Cancel</button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- end row -->\n\n  </div> <!-- container-fluid -->\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DropzoneConfigInterface } from 'ngx-dropzone-wrapper';\nimport { MarketingService } from '../../../core/services/marketing.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { environment } from '../../../../environments/environment';\n\n@Component({\n  selector: 'app-addseller',\n  templateUrl: './addseller.component.html',\n  styleUrls: ['./addseller.component.scss']\n})\nexport class AddsellerComponent implements OnInit {\n  backend = environment.backend;\n\n  productForm: FormGroup;\n  // bread crumb items\n  breadCrumbItems: Array<{}>;\n  // Form submition\n  submit: boolean = false;\n\n  config: DropzoneConfigInterface;\n  image = '';\n  file = '';\n  files: number[] = [];\n\n  constructor(private router: Router, public formBuilder: FormBuilder, private http: HttpClient, private setserv: MarketingService) {\n    this.config = setserv.getUploadConfig();\n\n  }\n  /**\n   * Returns form\n   */\n  get form() {\n    return this.productForm.controls;\n  }\n\n  ngOnInit() {\n    this.breadCrumbItems = [{ label: 'Sellers' }, { label: 'Edit Seller', active: true }];\n\n    this.productForm = this.formBuilder.group({\n      name_en: ['', [Validators.required]],\n      name_ar: ['', [Validators.required]],\n      email: ['', [Validators.required]],\n      phone: ['', [Validators.required]],\n      address_en: ['', [Validators.required]],\n      address_ar: ['', [Validators.required]],\n      description_ar: ['', [Validators.required]],\n      description_en: ['', [Validators.required]],\n      city: ['', [Validators.required]],\n      region: [null, [Validators.required]],\n      zip: ['', [Validators.required]],\n      documents: ['', [Validators.required]],\n    });\n    this.submit = false;\n  }\n\n  onAccept(file: any) {\n    this.image = file.name;\n    this.file = file;\n  }\n  /**\n   * Bootsrap validation form submit method\n   */\n  onUploadSuccess(event) {\n    // event[2].srcElement.then(response => response.json()).then(data => console.log(data)).catch(err => console.log(err));\n    event[0].previewElement.parentNode.removeChild(event[0].previewElement);\n\n    let response = JSON.parse(event[2].srcElement.response);\n    this.files.push(response.id);\n    console.log(this.productForm.controls);\n\n    this.productForm.controls.documents.setValue(this.files);\n    this.submit = false;\n\n  }\n  deleteImage(id) {\n    const index = this.files.indexOf(id);\n    if (index > -1) {\n      this.files.splice(index, 1); // 2nd parameter means remove one item only\n      this.productForm.controls.documents.setValue(this.files);\n    }\n  }\n\n  validSubmit() {\n    this.submit = true;\n\n    // stop here if form is invalid\n    if (this.productForm.invalid) {\n      return;\n    } else {\n      console.log(this.productForm);\n\n      this.setserv.addSeller(this.productForm.value).subscribe(data => this.router.navigate(['/sellers/list']));\n      this.submit = false;\n\n\n    }\n    // const formData = new FormData();\n    // formData.append('name', this.productForm.get('name').value);\n    // formData.append('manufacture_name', this.productForm.get('manufacture_name').value);\n    // formData.append('manufacture_brand', this.productForm.get('manufacture_brand').value);\n    // formData.append('price', this.productForm.get('price').value);\n    // formData.append('image', this.file, this.image);\n    //\n    // this.http.post<any>(`http://localhost:8000/api/products`, formData)\n    //   .subscribe((data) => {\n    //     // console.log('da', data);\n    //     return data;\n    //   });\n  }\n}\n","<div class=\"container-fluid\">\n\n  <!-- start page title -->\n  <app-page-title title=\"Add Seller\" [breadcrumbItems]=\"breadCrumbItems\"></app-page-title>\n  <!-- end page title -->\n\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n\n          <h4 class=\"card-title\">Basic Information</h4>\n          <p class=\"card-title-desc\">Fill all information</p>\n\n          <form [formGroup]=\"productForm\" id=\"productForm\" name=\"productForm\" (ngSubmit)=\"validSubmit()\">\n            <div class=\"row\">\n              <div class=\"col-sm-6\">\n                <div class=\"form-group\">\n                  <label for=\"shopname\">Seller Name</label>\n                  <input id=\"name_en\" name=\"name_en\" type=\"text\" class=\"form-control\" formControlName=\"name_en\" [ngClass]=\"{'is-invalid': submit && form.name_en.errors}\">\n                  <div *ngIf=\"submit && form.name_en.errors\" class=\"invalid-feedback\">\n                    <span *ngIf=\"form.name_en.errors.required\">Name is required.</span>\n                  </div>\n                </div>\n\n                <div class=\"form-group\">\n                  <label for=\"email\">Email</label>\n                  <input id=\"email\" name=\"email\" type=\"text\" class=\"form-control\" formControlName=\"email\" [ngClass]=\"{'is-invalid': submit && form.email.errors}\">\n                  <div *ngIf=\"submit && form.email.errors\" class=\"invalid-feedback\">\n                    <span *ngIf=\"form.email.errors.required\">Email is required.</span>\n                  </div>\n                </div>\n\n                <div class=\"form-group\">\n                  <label for=\"address_en\">Address</label>\n                  <input id=\"address_en\" name=\"address_en\" type=\"text\" class=\"form-control\" formControlName=\"address_en\" [ngClass]=\"{'is-invalid': submit && form.address_en.errors}\">\n                  <div *ngIf=\"submit && form.address_en.errors\" class=\"invalid-feedback\">\n                    <span *ngIf=\"form.address_en.errors.required\">Address is required.</span>\n                  </div>\n                </div>\n\n                <div class=\"form-group\">\n                  <label for=\"phone\">Phone No.</label>\n                  <input id=\"phone\" name=\"phone\" type=\"text\" class=\"form-control\" formControlName=\"phone\" [ngClass]=\"{'is-invalid': submit && form.phone.errors}\">\n                  <div *ngIf=\"submit && form.phone.errors\" class=\"invalid-feedback\">\n                    <span *ngIf=\"form.phone.errors.required\">Phone is required.</span>\n                  </div>\n                </div>\n\n\n                <div class=\"form-group\">\n                  <label for=\"product-image\" class=\"mt-2\"> Documents</label>\n                  <dropzone class=\"dropzone\" [ngClass]=\"{'is-invalid': submit && form.documents.errors}\" (success)=\"onUploadSuccess($event)\" [config]=\"config\"></dropzone>\n                  <input id=\"documents\" name=\"documents\" type=\"hidden\" formControlName=\"documents\">\n                  <div *ngIf=\"submit && form.documents.errors\" class=\"invalid-feedback\">\n                    <span *ngIf=\"form.documents.errors.required\">Documents are required. Upload at least 1.</span>\n                  </div>\n                  <div *ngIf=\"files.length>0\" class=\"dropzone-display\">\n                    <div class=\"row\">\n                      <div *ngFor=\"let file of files\" class=\"col-md-4\">\n                        <div class=\"document-display\">\n                          <a (click)=\"deleteImage(file)\" class=\"delete-image\"><i class=\"fas fa-trash-alt text-danger mr-1\"></i>\n                          </a>\n                          <img src=\"{{backend + '/getfile/?id='  + file}}\" class=\"img-fluid mx-auto d-block\">\n                          <!-- <img src=\"{{backend + '/images/?id='  + image.id}}\" alt=\"\"\n                              class=\"img-fluid mx-auto d-block\"> -->\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n              </div>\n\n              <div class=\"col-sm-6\">\n                <div class=\"form-group\">\n                  <label for=\"name_ar\">إسم التاجر</label>\n                  <input id=\"name_ar\" name=\"name_ar\" type=\"text\" class=\"form-control\" formControlName=\"name_ar\" [ngClass]=\"{'is-invalid': submit && form.name_ar.errors}\">\n                  <div *ngIf=\"submit && form.name_ar.errors\" class=\"invalid-feedback\">\n                    <span *ngIf=\"form.name_ar.errors.required\">إسم التاجر is required.</span>\n                  </div>\n                </div>\n\n                <div class=\"row\">\n                  <div class=\"col-lg-4\">\n                    <div class=\"form-group\">\n                      <label for=\"formrow-inputCity\">City</label>\n                      <input type=\"text\" class=\"form-control\" id=\"city\" formControlName=\"city\" [ngClass]=\"{'is-invalid': submit && form.city.errors}\">\n                      <div *ngIf=\"submit && form.city.errors\" class=\"invalid-feedback\">\n                        <span *ngIf=\"form.city.errors.required\">City is required.</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"col-lg-4\">\n                    <div class=\"form-group\">\n                      <label for=\"formrow-inputState\">Region</label>\n                      <ng-select formControlName=\"region\" [ngClass]=\"{'is-invalid': submit && form.region.errors}\" [items]=\"['Ar Riyadh','Western Region', 'Eastern Region', 'Medina Region', 'Aseer', 'Jazan']\"></ng-select>\n                      <div *ngIf=\"submit && form.region.errors\" class=\"invalid-feedback\">\n                        <span *ngIf=\"form.region.errors.required\">Region is required.</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div class=\"col-lg-4\">\n                    <div class=\"form-group\">\n                      <label for=\"formrow-inputZip\">Zip</label>\n                      <input type=\"text\" class=\"form-control\" formControlName=\"zip\" id=\"zip\" [ngClass]=\"{'is-invalid': submit && form.zip.errors}\">\n                      <div *ngIf=\"submit && form.zip.errors\" class=\"invalid-feedback\">\n                        <span *ngIf=\"form.zip.errors.required\">Zip is required.</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"form-group\">\n                  <label for=\"address_ar\">العنوان</label>\n                  <input id=\"address_ar\" name=\"address_ar\" type=\"text\" class=\"form-control\" formControlName=\"address_ar\" [ngClass]=\"{'is-invalid': submit && form.address_ar.errors}\">\n                  <div *ngIf=\"submit && form.address_ar.errors\" class=\"invalid-feedback\">\n                    <span *ngIf=\"form.address_ar.errors.required\">Address is required.</span>\n                  </div>\n                </div>\n\n                <div class=\"form-group\">\n                  <label for=\"productdesc\">Notes</label>\n                  <textarea class=\"form-control\" [ngClass]=\"{'is-invalid': submit && form.description_en.errors}\" formControlName=\"description_en\" id=\"description_en\" rows=\"5\"></textarea>\n                  <div *ngIf=\"submit && form.description_en.errors\" class=\"invalid-feedback\">\n                    <span *ngIf=\"form.description_en.errors.required\">Notes are required.</span>\n                  </div>\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"productdesc\">ملاحظات</label>\n                  <textarea class=\"form-control\" [ngClass]=\"{'is-invalid': submit && form.description_ar.errors}\" formControlName=\"description_ar\" id=\"description_ar\" rows=\"5\"></textarea>\n                  <div *ngIf=\"submit && form.description_ar.errors\" class=\"invalid-feedback\">\n                    <span *ngIf=\"form.description_ar.errors.required\">ملاحظات are required.</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"mt-3\">\n              <input type=\"submit\" form=\"productForm\" class=\"btn btn-primary mr-1\" value=\"Save Changes\" [disabled]=\"submit\" />\n              <button type=\"submit\" class=\"btn btn-secondary\">Cancel</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n  <!-- end row -->\n\n</div> <!-- container-fluid -->\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { SellersRoutingModule } from './sellers-routing.module';\nimport { UIModule } from '../../shared/ui/ui.module';\nimport { WidgetModule } from '../../shared/widget/widget.module';\n\nimport { Ng5SliderModule } from 'ng5-slider';\nimport { Ng2SearchPipeModule } from 'ng2-search-filter';\nimport { NgbNavModule, NgbDropdownModule, NgbPaginationModule } from '@ng-bootstrap/ng-bootstrap';\nimport { DropzoneModule } from 'ngx-dropzone-wrapper';\nimport { DROPZONE_CONFIG } from 'ngx-dropzone-wrapper';\nimport { DropzoneConfigInterface } from 'ngx-dropzone-wrapper';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { EditsellerComponent } from './editseller/editseller.component';\n\nimport { AddsellerComponent } from './addseller/addseller.component';\nimport { SellerslistComponent } from './sellerslist/sellerslist.component';\n\n\nconst config: DropzoneConfigInterface = {\n  // Change this to your upload POST address:\n\n};\n\n@NgModule({\n  // tslint:disable-next-line: max-line-length\n  declarations: [AddsellerComponent, SellerslistComponent, EditsellerComponent],\n  imports: [\n    CommonModule,\n    SellersRoutingModule,\n    NgbNavModule,\n    FormsModule,\n    Ng2SearchPipeModule,\n    NgbDropdownModule,\n    DropzoneModule,\n    ReactiveFormsModule,\n    UIModule,\n    WidgetModule,\n    Ng5SliderModule,\n    NgSelectModule,\n    NgbPaginationModule\n  ],\n  providers: [\n    {\n      provide: DROPZONE_CONFIG,\n      useValue: config\n    }\n  ]\n})\nexport class SellersModule { }\n","import { Component, OnInit } from '@angular/core';\n\nimport { Seller } from '../../../core/models/seller.models';\nimport { MarketingService } from '../../../core/services/marketing.service';\nimport { Router } from '@angular/router';\n\nimport { customersData } from './data';\n\n@Component({\n  selector: 'app-sellerslist',\n  templateUrl: './sellerslist.component.html',\n  styleUrls: ['./sellerslist.component.scss']\n})\nexport class SellerslistComponent implements OnInit {\n\n // bread crumb items\n breadCrumbItems: Array<{}>;\n\n customersData: Seller[];\n\n term: any;\n\n // page\n currentpage: number;\n\n constructor(private router: Router, private marketingService: MarketingService) { }\n\n ngOnInit() {\n   this.breadCrumbItems = [{ label: 'Sellers' }, { label: 'Sellers', active: true }];\n   this.marketingService.getSellers().subscribe(val =>   { this.customersData = val, console.log(val);\n    });\n   this.currentpage = 0;\n\n   /**\n    * Fetches the data\n    */\n   // this._fetchData();\n }\n deleteGroupItem(id) {\n   this.marketingService.delSeller(id).subscribe(data => {\n     this.customersData = this.customersData.filter(data => data.id != id);\n\n     // this.sharedDataService.changeTable(newTable);\n     // modal.close();\n     // this.newForm.reset();\n   });\n }\n editItem(id){\n   this.router.navigate(['/sellers/edit/'+id]);\n }\n /**\n  * Customers data fetches\n  */\n // private _fetchData() {\n //   this.customersData = customersData;\n // }\n}\n","<div class=\"container-fluid\">\n\n    <app-page-title title=\"Sellers\" [breadcrumbItems]=\"breadCrumbItems\"></app-page-title>\n\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <div class=\"row mb-2\">\n              <div class=\"col-sm-4\">\n                <div class=\"search-box mr-2 mb-2 d-inline-block\">\n                  <div class=\"position-relative\">\n                    <input type=\"text\" class=\"form-control\" placeholder=\"Search...\" [(ngModel)]=\"term\" />\n                    <i class=\"bx bx-search-alt search-icon\"></i>\n                  </div>\n                </div>\n              </div>\n\n              <!-- end col-->\n            </div>\n            <div class=\"table-responsive\">\n              <table class=\"table table-centered table-nowrap\">\n                <thead>\n                  <tr>\n                    <th>#</th>\n                    <th>Seller Name</th>\n                    <th>إسم التاحر</th>\n                    <th>Phone / Email</th>\n                    <th>Address</th>\n                    <th>Sales</th>\n                    <th>Wallet Balance</th>\n                    <th>Joining Date</th>\n                    <th>Action</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let customers of customersData  | filter:term ;let i = index;\">\n                    <td>\n                      <div class=\"custom-control custom-checkbox\">\n                        <input id=\"customCheck{{i}}\" type=\"checkbox\" class=\"custom-control-input\" />\n                        <label class=\"custom-control-label\" for=\"customCheck{{i}}\">&nbsp;</label>\n                      </div>\n                    </td>\n                    <td>{{customers.name_en}}</td>\n                    <td>{{customers.name_ar}}</td>\n                    <td>\n                      <p class=\"mb-1\">{{customers.phone}}</p>\n                      <p class=\"mb-0\">{{customers.email}}</p>\n                    </td>\n\n                    <td>{{customers.address_en}}</td>\n                    <td>\n                        {{customers.sales}}\n                    </td>\n                    <td>{{customers.balance}}</td>\n                    <td>{{customers.createdAt  | date:'dd/LL/YYYY' }}</td>\n                    <td>\n                      <div class=\"dropdown\" ngbDropdown container=\"body\" placement=\"bottom-right\">\n                        <a href=\"javascript: void(0);\" class=\"dropdown-toggle card-drop\" data-toggle=\"dropdown\"\n                          ngbDropdownToggle aria-expanded=\"false\">\n                          <i class=\"mdi mdi-dots-horizontal font-size-18\"></i>\n                        </a>\n                        <ul class=\"dropdown-menu dropdown-menu-right\" ngbDropdownMenu>\n                          <li><a (click)=\"editItem(customers.id)\" class=\"dropdown-item\"><i\n                                class=\"fas fa-pencil-alt text-success mr-1\"></i>\n                              Edit</a></li>\n                          <li><a (click)=\"deleteGroupItem(customers.id)\" class=\"dropdown-item\"><i\n                                class=\"fas fa-trash-alt text-danger mr-1\"></i>\n                              Delete</a></li>\n                        </ul>\n                      </div>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n            <!-- pagination -->\n            <!-- <ngb-pagination [collectionSize]=\"50\" [(page)]=\"currentpage\"\n              class=\"pagination pagination-rounded justify-content-end mb-2\" aria-label=\"Default pagination\">\n            </ngb-pagination> -->\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- end row -->\n  </div>\n"]}