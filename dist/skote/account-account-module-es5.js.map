{"version":3,"sources":["webpack:///src/app/account/auth/auth-routing.ts","webpack:///src/app/account/auth/login/login.component.ts","webpack:///src/app/account/auth/login/login.component.html","webpack:///src/app/account/auth/signup/signup.component.ts","webpack:///src/app/account/auth/signup/signup.component.html","webpack:///src/app/account/auth/passwordreset/passwordreset.component.ts","webpack:///src/app/account/auth/passwordreset/passwordreset.component.html","webpack:///src/app/account/auth/auth.module.ts","webpack:///src/app/account/account.module.ts","webpack:///src/app/account/account-routing.module.ts"],"names":["routes","path","component","AuthRoutingModule","forChild","imports","exports","LoginComponent","formBuilder","route","router","authenticationService","authFackservice","submitted","error","year","Date","getFullYear","loginForm","group","email","required","password","returnUrl","snapshot","queryParams","controls","invalid","login","f","value","subscribe","data","console","log","navigate","onSubmit","selector","templateUrl","styleUrls","SignupComponent","userService","successmsg","signupForm","username","defaultauth","register","then","res","pipe","PasswordresetComponent","success","loading","resetForm","resetPassword","AuthModule","declarations","AccountModule","loadChildren","m","AccountRoutingModule"],"mappings":"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","file":"account-account-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { PasswordresetComponent } from './passwordreset/passwordreset.component';\n\nconst routes: Routes = [\n    {\n        path: 'login',\n        component: LoginComponent\n    },\n    {\n        path: 'signup',\n        component: SignupComponent\n    },\n    {\n        path: 'reset-password',\n        component: PasswordresetComponent\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { AuthenticationService } from '../../../core/services/auth.service';\nimport { AuthfakeauthenticationService } from '../../../core/services/authfake.service';\n\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { environment } from '../../../../environments/environment';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\n\n/**\n * Login component\n */\nexport class LoginComponent implements OnInit, AfterViewInit {\n\n  loginForm: FormGroup;\n  submitted = false;\n  error = '';\n  returnUrl: string;\n\n  // set the currenr year\n  year: number = new Date().getFullYear();\n\n  // tslint:disable-next-line: max-line-length\n  constructor(private formBuilder: FormBuilder, private route: ActivatedRoute, private router: Router, private authenticationService: AuthenticationService,\n    private authFackservice: AuthfakeauthenticationService) { }\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]],\n    });\n\n    // reset login status\n    // this.authenticationService.logout();\n    // get return url from route parameters or default to '/'\n    // tslint:disable-next-line: no-string-literal\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n\n  ngAfterViewInit() {\n  }\n\n  // convenience getter for easy access to form fields\n  get f() { return this.loginForm.controls; }\n\n  /**\n   * Form submit\n   */\n  onSubmit() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n      return;\n    } else {\n      // if (environment.defaultauth === 'firebase') {\n      //   this.authenticationService.login(this.f.email.value, this.f.password.value).then((res: any) => {\n      //     this.router.navigate(['/dashboard']);\n      //   })\n      //     .catch(error => {\n      //       this.error = error ? error : '';\n      //     });\n      // } else {\n        this.authFackservice.login(this.f.email.value, this.f.password.value)\n        //  .pipe(first())\n          .subscribe(\n            data => {\n              console.log(data);\n\n              this.router.navigate(['/dashboard']);\n            },\n            error => {\n              this.error = error ? error : '';\n            });\n      // }\n    }\n  }\n}\n","<div class=\"home-btn d-none d-sm-block\">\n  <a href=\"/\" class=\"text-dark\"><i class=\"mdi mdi-home-variant h2\"></i></a>\n</div>\n<div class=\"account-pages my-5 pt-sm-5\">\n  <div class=\"container\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-md-8 col-lg-6 col-xl-5\">\n        <div class=\"card overflow-hidden\">\n          <div class=\"bg-soft-primary\">\n            <div class=\"row\">\n              <div class=\"col-7\">\n                <div class=\"text-primary p-4\">\n                  <h5 class=\"text-primary\">Welcome Back !</h5>\n                  <p>Sign in to continue to Kenf Admin Dashboard.</p>\n                </div>\n              </div>\n              <div class=\"col-5 align-self-end\">\n                <img src=\"assets/images/kanf-logo.png\" alt=\"\" class=\"img-fluid\">\n              </div>\n            </div>\n          </div>\n          <div class=\"card-body pt-0\">\n            <div>\n              <a href=\"/\">\n                <div class=\"avatar-md profile-user-wid mb-4\">\n                  <span class=\"avatar-title rounded-circle bg-light\">\n                    <img src=\"assets/images/logo.svg\" alt=\"\" class=\"rounded-circle\" height=\"34\">\n                  </span>\n                </div>\n              </a>\n            </div>\n            <div class=\"p-2\">\n              <form class=\"form-horizontal\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n\n                <ngb-alert type=\"danger\" *ngIf=\"error\" [dismissible]=\"false\">{{ error }}</ngb-alert>\n\n                <div class=\"form-group mb-3\">\n                  <label for=\"email\">Email</label>\n\n                  <input type=\"email\" formControlName=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email\"\n                    [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\n                  <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                    <div *ngIf=\"f.email.errors.email\">Email must be a valid email address</div>\n                  </div>\n                </div>\n\n                <div class=\"form-group mb-3\">\n                  <label for=\"password\">Password</label>\n\n                  <input type=\"password\" formControlName=\"password\" class=\"form-control\" id=\"password\"\n                    [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" placeholder=\"Password\" />\n                  <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                  </div>\n                </div>\n\n                <div class=\"custom-control custom-checkbox\">\n                  <input type=\"checkbox\" class=\"custom-control-input\" id=\"customControlInline\">\n                  <label class=\"custom-control-label\" for=\"customControlInline\">Remember me</label>\n                </div>\n\n                <div class=\"mt-3\">\n                  <button class=\"btn btn-primary btn-block\" type=\"submit\">Log In</button>\n                </div>\n\n                <div class=\"mt-4 text-center\">\n                  <a routerLink=\"/account/reset-password\" class=\"text-muted\"><i class=\"mdi mdi-lock mr-1\"></i> Forgot\n                    your\n                    password?</a>\n                </div>\n              </form>\n            </div>\n\n          </div>\n        </div>\n        <div class=\"mt-5 text-center\">\n          \n          <p>© {{year}} Kenf.</p>\n        </div>\n\n      </div>\n    </div>\n  </div>\n\n  <!-- end container -->\n</div>\n<!-- end page -->\n","import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { AuthenticationService } from '../../../core/services/auth.service';\nimport { environment } from '../../../../environments/environment';\nimport { first } from 'rxjs/operators';\nimport { UserProfileService } from '../../../core/services/user.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\nexport class SignupComponent implements OnInit, AfterViewInit {\n\n  signupForm: FormGroup;\n  submitted = false;\n  error = '';\n  successmsg = false;\n\n  // set the currenr year\n  year: number = new Date().getFullYear();\n\n  // tslint:disable-next-line: max-line-length\n  constructor(private formBuilder: FormBuilder, private route: ActivatedRoute, private router: Router, private authenticationService: AuthenticationService,\n    private userService: UserProfileService) { }\n\n  ngOnInit() {\n    this.signupForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n    });\n  }\n\n  ngAfterViewInit() {\n  }\n\n  // convenience getter for easy access to form fields\n  get f() { return this.signupForm.controls; }\n\n  /**\n   * On submit form\n   */\n  onSubmit() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.signupForm.invalid) {\n      return;\n    } else {\n      if (environment.defaultauth === 'firebase') {\n        this.authenticationService.register(this.f.email.value, this.f.password.value).then((res: any) => {\n          this.successmsg = true;\n          if (this.successmsg) {\n            this.router.navigate(['/dashboard']);\n          }\n        })\n          .catch(error => {\n            this.error = error ? error : '';\n          });\n      } else {\n        this.userService.register(this.signupForm.value)\n          .pipe(first())\n          .subscribe(\n            data => {\n              this.successmsg = true;\n              if (this.successmsg) {\n                this.router.navigate(['/account/login']);\n              }\n            },\n            error => {\n              this.error = error ? error : '';\n            });\n      }\n    }\n  }\n}\n","<div class=\"home-btn d-none d-sm-block\">\n  <a href=\"/\" class=\"text-dark\"><i class=\"mdi mdi-home-variant h2\"></i></a>\n</div>\n<div class=\"account-pages my-5 pt-sm-5\">\n  <div class=\"container\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-md-8 col-lg-6 col-xl-5\">\n        <div class=\"card overflow-hidden\">\n          <div class=\"bg-soft-primary\">\n            <div class=\"row\">\n              <div class=\"col-7\">\n                <div class=\"text-primary p-4\">\n                  <h5 class=\"text-primary\">Free Register</h5>\n                  <p>Get your free Skote account now.</p>\n                </div>\n              </div>\n              <div class=\"col-5 align-self-end\">\n                <img src=\"assets/images/profile-img.png\" alt=\"\" class=\"img-fluid\">\n              </div>\n            </div>\n          </div>\n          <div class=\"card-body pt-0\">\n            <div>\n              <a href=\"/\">\n                <div class=\"avatar-md profile-user-wid mb-4\">\n                  <span class=\"avatar-title rounded-circle bg-light\">\n                    <img src=\"assets/images/logo.svg\" alt=\"\" class=\"rounded-circle\" height=\"34\">\n                  </span>\n                </div>\n              </a>\n            </div>\n            <div class=\"p-2\">\n\n              <form class=\"form-horizontal\" name=\"signupForm\" [formGroup]=\"signupForm\" (ngSubmit)=\"onSubmit()\"\n                novalidate>\n\n                <ngb-alert type=\"success\" *ngIf=\"successmsg\" [dismissible]=\"false\">Registeration successfull.\n                </ngb-alert>\n\n                <ngb-alert type=\"danger\" *ngIf=\"error\" [dismissible]=\"false\">{{ error }}</ngb-alert>\n\n                <div class=\"form-group mb-3\">\n                  <label for=\"username\">Username</label>\n\n                  <input type=\"text\" formControlName=\"username\" class=\"form-control\"\n                    [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" id=\"username\" placeholder=\"Enter username\" />\n\n                  <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.username.errors.required\">Userame is required</div>\n                  </div>\n                </div>\n\n                <div class=\"form-group mb-3\">\n                  <label for=\"email\">Email</label>\n\n                  <input type=\"email\" formControlName=\"email\" class=\"form-control\"\n                    [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" id=\"email\" placeholder=\"Email\" />\n\n                  <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                    <div *ngIf=\"f.email.errors.email\">Email must be a valid email address</div>\n                  </div>\n                </div>\n\n                <div class=\"form-group\">\n                  <label for=\"password\">Password</label>\n\n                  <input type=\"password\" formControlName=\"password\" class=\"form-control\"\n                    [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" id=\"password\" placeholder=\"Password\" />\n\n                  <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                  </div>\n                </div>\n\n                <div class=\"mt-4\">\n                  <button class=\"btn btn-primary btn-block\" type=\"submit\">Register</button>\n                </div>\n                <div class=\"mt-4 text-center\">\n                  <h5 class=\"font-size-14 mb-3\">Sign in with</h5>\n\n                  <ul class=\"list-inline\">\n                      <li class=\"list-inline-item\">\n                          <a href=\"javascript::void()\" class=\"social-list-item bg-primary text-white border-primary\">\n                              <i class=\"mdi mdi-facebook\"></i>\n                          </a>\n                      </li>\n                      <li class=\"list-inline-item\">\n                          <a href=\"javascript::void()\" class=\"social-list-item bg-info text-white border-info\">\n                              <i class=\"mdi mdi-twitter\"></i>\n                          </a>\n                      </li>\n                      <li class=\"list-inline-item\">\n                          <a href=\"javascript::void()\" class=\"social-list-item bg-danger text-white border-danger\">\n                              <i class=\"mdi mdi-google\"></i>\n                          </a>\n                      </li>\n                  </ul>\n              </div>\n                <div class=\"mt-4 text-center\">\n                  <p class=\"mb-0\">By registering you agree to the Skote <a href=\"javascript: void(0);\"\n                      class=\"text-primary\">Terms of\n                      Use</a></p>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n        <!-- end card -->\n\n        <div class=\"mt-5 text-center\">\n          <p>Already have an account ? <a routerLink=\"/account/login\" class=\"font-weight-medium text-primary\"> Login</a>\n          </p>\n          <p>© {{year}} Skote. Crafted with <i class=\"mdi mdi-heart text-danger\"></i> by Themesbrand</p>\n        </div>\n      </div> <!-- end col -->\n    </div>\n    <!-- end row -->\n  </div>\n  <!-- end container -->\n</div>\n<!-- end page -->\n","import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { AuthenticationService } from '../../../core/services/auth.service';\nimport { environment } from '../../../../environments/environment';\n\n@Component({\n  selector: 'app-passwordreset',\n  templateUrl: './passwordreset.component.html',\n  styleUrls: ['./passwordreset.component.scss']\n})\n\n/**\n * Reset-password component\n */\nexport class PasswordresetComponent implements OnInit, AfterViewInit {\n\n  resetForm: FormGroup;\n  submitted = false;\n  error = '';\n  success = '';\n  loading = false;\n\n  // set the currenr year\n  year: number = new Date().getFullYear();\n\n  // tslint:disable-next-line: max-line-length\n  constructor(private formBuilder: FormBuilder, private route: ActivatedRoute, private router: Router, private authenticationService: AuthenticationService) { }\n\n  ngOnInit() {\n\n    this.resetForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n    });\n  }\n\n  ngAfterViewInit() {\n  }\n\n  // convenience getter for easy access to form fields\n  get f() { return this.resetForm.controls; }\n\n  /**\n   * On submit form\n   */\n  onSubmit() {\n    this.success = '';\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.resetForm.invalid) {\n      return;\n    }\n    if (environment.defaultauth === 'firebase') {\n      this.authenticationService.resetPassword(this.f.email.value)\n        .catch(error => {\n          this.error = error ? error : '';\n        });\n    }\n  }\n}\n","<div class=\"home-btn d-none d-sm-block\">\n  <a href=\"/\" class=\"text-dark\"><i class=\"mdi mdi-home-variant h2\"></i></a>\n</div>\n<div class=\"account-pages my-5 pt-sm-5\">\n  <div class=\"container\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-md-8 col-lg-6 col-xl-5\">\n        <div class=\"card overflow-hidden\">\n          <div class=\"bg-soft-primary\">\n            <div class=\"row\">\n              <div class=\"col-7\">\n                <div class=\"text-primary p-4\">\n                  <h5 class=\"text-primary\"> Reset Password</h5>\n                  <p>Re-Password with Skote.</p>\n                </div>\n              </div>\n              <div class=\"col-5 align-self-end\">\n                <img src=\"assets/images/profile-img.png\" alt=\"\" class=\"img-fluid\">\n              </div>\n            </div>\n          </div>\n          <div class=\"card-body pt-0\">\n            <div>\n              <a href=\"/\">\n                <div class=\"avatar-md profile-user-wid mb-4\">\n                  <span class=\"avatar-title rounded-circle bg-light\">\n                    <img src=\"assets/images/logo.svg\" alt=\"\" class=\"rounded-circle\" height=\"34\">\n                  </span>\n                </div>\n              </a>\n            </div>\n\n            <form class=\"needs-validation\" name=\"resetForm\" [formGroup]=\"resetForm\" (ngSubmit)=\"onSubmit()\" novalidate>\n\n              <ngb-alert type=\"danger\" *ngIf=\"error\" [dismissible]=\"false\">{{ error }}</ngb-alert>\n\n              <div class=\"form-group mb-3\">\n                <label for=\"email\">Email</label>\n\n                <input type=\"email\" formControlName=\"email\" class=\"form-control\"\n                  [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" id=\"email\" placeholder=\"Email\" />\n\n                <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                  <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                  <div *ngIf=\"f.email.errors.email\">Email must be a valid email address</div>\n                </div>\n              </div>\n              <div class=\"form-group mb-0 row\">\n                <div class=\"col-12 text-right\">\n                  <button class=\"btn btn-primary w-md\" type=\"submit\">Reset</button>\n                </div>\n              </div>\n            </form>\n\n          </div> <!-- end card-body-->\n        </div>\n        <!-- end card -->\n        <div class=\"mt-5 text-center\">\n          <p>Remember It ? <a routerLink=\"/account/login\" class=\"font-weight-medium text-primary\"> Sign In here</a> </p>\n          <p>© {{year}} Kenf.</p>\n        </div>\n\n      </div> <!-- end col -->\n    </div>\n    <!-- end row -->\n  </div>\n  <!-- end container -->\n</div>\n<!-- end page -->\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { NgbAlertModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { UIModule } from '../../shared/ui/ui.module';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { AuthRoutingModule } from './auth-routing';\nimport { PasswordresetComponent } from './passwordreset/passwordreset.component';\n\n@NgModule({\n  declarations: [LoginComponent, SignupComponent, PasswordresetComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgbAlertModule,\n    UIModule,\n    AuthRoutingModule\n  ]\n})\nexport class AuthModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AccountRoutingModule } from './account-routing.module';\nimport { AuthModule } from './auth/auth.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    AccountRoutingModule,\n    AuthModule\n  ]\n})\nexport class AccountModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: 'auth', loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule) },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AccountRoutingModule { }\n"]}